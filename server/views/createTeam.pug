extends layout
block header
block content
  div
    include partials/nav.pug

    main
      .container#flash-container

      .container
        h1 Want to join an existing team?
          a.btn.btn-primary(href=`/api/teams/join`)
        h1 Go Team!

        form#create-team-form
          .form-group
            label(for='team-name') Team Name
            input#team-name.form-control(type='text', aria-describedby='team-name-help', placeholder='' required=true)
            small#team-name-help.form-text.text-muted Your team name.
          .form-group
            label(for='team-repo') GitHub Repository
            input#team-repo.form-control(type='url', placeholder='', required=true)
          .form-group
            label(for='team-site') Site URL
            input#team-site.form-control(type='url', aria-describedby='team-site-help', placeholder='', required=true)
            small#team-name-help.form-text.text-muted The URL of your site, useually provided by netlify.
          .form-check
            input#isOnLine.form-check-input(type='checkbox', value='')
            label.form-check-label(for='isOnLine')
              | Online only team

          button.btn.btn-primary(type='submit') Submit

    script(src='https://cdnjs.cloudflare.com/ajax/libs/bluebird/3.3.4/bluebird.min.js')
    script(src='https://unpkg.com/axios/dist/axios.min.js')
    script.
      var createTeamForm = document.getElementById('create-team-form');
      var flashContainer = document.getElementById('flash-container');
      var reloadTimeout = null;

      function createFlash(type, message) {
        var alert = document.createElement("DIV");
        alert.classList.add('alert', 'alert-' + type);
        alert.role = 'alert';
        alert.innerHTML = message;
        flashContainer.appendChild(alert);
        return null;
      }

      function handleFormSubmit(e) {
        e.preventDefault();
        var teamName = createTeamForm.querySelector('#team-name').value;
        var teamRepo = createTeamForm.querySelector('#team-repo').value;
        var teamSite = createTeamForm.querySelector('#team-site').value;
        var teamIsOnline = createTeamForm.querySelector('#isOnLine').checked;
        var team = {
          name: teamName,
          collaborators: [],
          githubRepository: teamRepo,
          siteUrl: teamSite,
          isOnlineHackathon: teamIsOnline
        }
        return axios.post('/api/teams', team).then(function(response) {
         var status = response.status;
          if (parseInt(status, 10) === 200) {
            reloadTimeout = setTimeout(function() { window.location.reload()}, 5000);
            return createFlash('success', 'Your team has been created!<br><br>GO ' + teamName + '!<br><br>This page will reload in five seconds.');
          } else {
            return createFlash('warning', 'Something went wrong creating your team')
          }
        }).catch(function(error) {
          console.error(error);
          return createFlash('danger', 'Something went wrong creating your team, more info in the console')
        })
      }
      createTeamForm.addEventListener('submit', handleFormSubmit);
      window.onbeforeunload = function(event) {
        createTeamForm.removeEventListener('submit', handleFormSubmit);
        if (reloadTimeout) {
          clearTimeout(reloadTimeout)
        }
        return null;
      };
