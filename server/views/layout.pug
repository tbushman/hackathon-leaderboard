doctype html
html(lang='en')
  include partials/head.pug
  body#page-top
    block header
    #vue
      block content
    include partials/scripts.pug
    script(type="text/javascript").
      new Vue({
        el: '#vue',
        data: function data() { return { 
            teams: this.parseArr(!{JSON.stringify(teams)}),
            team: this.parseObj(!{JSON.stringify(team)}),
            webhooks: '',
            checked: false,
            picked: 'All',
            ascending: true,
            columns: {
              name: 'Team Name',
              githubRepository: 'Repo',
              siteUrl: 'Site',
              isOnlineHackathon: 'Hackathon',
              lighthouse: 'Lighthouse',
              collaborators: 'Collaborators',
              screenshot: 'Screenshot'
            },
            lighthousekeys: [ 'seo', 'best-practices', 'accessibility', 'pwa', 'performance']
          } 
        },
        mounted: function() {
          var self = this;
          self.log();
          if (self.teams && self.teams !== '' && self.teams !== ['']) {
            self.getTeams();
          }
          if (self.team && self.team !== '' && self.team !== ['']) {
            self.renderWebhooks();
          }
        },
        methods: {
          parseObj: function(obj){
            if (!obj) return ''
            return obj
          },
          parseArr: function(arr){
            if (!arr) return ['']
            return arr;
          },
          getTeams() {
            var self = this;
            axios.get('/api/teams')
            .then((res) => {
              console.log(res.data);
              self.teams = res.data;
            })
          },
          sortBy(key, ascending) {
            console.log(key, ascending)
            var self = this;
            self.ascending = !ascending;
            self.teams.sort(function(a, b){
              var itemA, itemB;
              switch(key) {
                case 'name':
                  itemA = a.name;
                  itemB = b.name;
                  break;
                /*case 'isOnlineHackathon':
                  itemA = a.isOnlineHackathon;
                  itemB = b.isOnlineHackathon;
                  break;*/
                case 'lighthouse':
                  itemA = self.lighthousekeys.map(function(k){
                    return a.lighthouse[a.lighthouse.length - 1].k;
                  }).reduce(function(acc, curr){
                    return acc + curr;
                  });
                  itemB = self.lighthousekeys.map(function(k){
                    return b.lighthouse[b.lighthouse.length - 1].k;
                  }).reduce(function(acc, curr){
                    return acc + curr;
                  });
                  console.log(itemA,itemB)
                  break;
                default:
                  
              }
              switch(ascending) {
                case true:
                  if (itemA < itemB) {
                    return -1;
                  }
                  if (itemA > itemB) {
                    return 1;
                  }
                  break;
                case false:
                  if (itemA < itemB) {
                    return 1;
                  }
                  if (itemA > itemB) {
                    return -1;
                  }
                  break;
                default:
                  return 0;
              }
              return 0;
            })
          },
          createFlash(type, message) {
            var flashContainer = document.getElementById('flash-container');

            var alert = document.createElement("DIV");
            alert.classList.add('alert', 'alert-' + type);
            alert.role = 'alert';
            alert.innerHTML = message;
            flashContainer.appendChild(alert);
            return null;
          },
          handleFormSubmit(e) {
            var self = this;
            e.preventDefault();
            var axiosurl, msg;
            if (e.target.getAttribute('id') === 'create-team-form') {
              axiosurl = '/api/teams';
              msg = 'creat'
            } else {
              axiosurl = `/api/teams/${self.team._id}`
              msg = 'updat'
            }
            var createTeamForm = document.getElementById('create-team-form') || document.getElementById('update-team-form');
            var flashContainer = document.getElementById('flash-container');
            var actionContainer = document.getElementById('team-form-or-webhook');
            var teamName = createTeamForm.querySelector('#team-name').value;
            var teamRepo = createTeamForm.querySelector('#team-repo').value;
            var teamSite = createTeamForm.querySelector('#team-site').value;
            var teamCollaborators = createTeamForm.querySelector('#team-collab').value;
            var teamIsOnline = createTeamForm.querySelector('#isOnLine').checked;
            var team = {
              name: teamName,
              collaborators: teamCollaborators.split(',').map(function(str) { return str.trim(); }).filter(Boolean),
              githubRepository: teamRepo,
              siteUrl: teamSite,
              isOnlineHackathon: teamIsOnline
            }
            return axios.post(axiosurl, team).then(function(response) {
              var status = response.status;
              if (parseInt(status, 10) === 200) {
                self.createFlash('success', 'Your team has been '+msg+'ed!<br><br>');
                if (msg === 'creat') {
                  axios.post(`/api/teams/webhooks/${response.data.teamId}`)
                  .then(() => {
                    return window.location.href = '/team';
                  })
                  .catch(function(error){
                    console.error(error);
                    return self.createFlash('danger', 'Something went wrong '+msg+'ing your team, more info in the console')
                  })
                }
                
              } else {
                return self.createFlash('warning', 'Something went wrong '+msg+'ing your team')
              }
            })
          },
          renderWebhooks() {
            var self = this;
            if (self.webhooks) {
              console.log(self.webhooks)
            }
            axios.get(`/api/teams/webhooks/${self.team._id}`)
            .then(function(result) { 
              console.log(result.data.webhook)
              self.webhooks = result.data.webhook;
            })
          },
          removeTeam() {
            var self = this;
            if (self.team && self.team !== '') {
              axios.post(`/api/teams/delete/${self.team._id}`)
              .then((res) => {
                return window.location.href = '/';
              })
              .catch((err) => {
                console.log(err)
              })
            }
          },
          log: function() {
            console.log(Object.keys(this.teams[0]))
          }
        } 
      })