doctype html
html(lang='en')
  include partials/head.pug
  body#page-top
    block header
    #vue
      block content
    include partials/scripts.pug
    script(type="text/javascript").
      new Vue({
        el: '#vue',
        data: function data() { return {
            teams: this.parseArr(!{JSON.stringify(teams)}),
            team: this.parseObj(!{JSON.stringify(team)}),
            webhooks: this.parseObj(!{JSON.stringify(webhooks)}),
            checked: false,
            picked:
            (this.parseObj(!{JSON.stringify(team)}) !== '' ?
              (
                this.parseObj(!{JSON.stringify(team)}).isOnlineHackathon ?
                'Online Only' :
                'In-person'
              ) : 'In-person'),
            ascending: true,
            buildStatuses: ['complete', 'pending', 'initial', 'failed'],
            columns: {
              buildStatus: 'Build Status',
              name: 'Team Name',
              githubRepository: 'Repo',
              siteUrl: 'Site',
              isOnlineHackathon: 'Hackathon',
              lighthouse: 'Lighthouse',
              collaborators: 'Collaborators',
              screenshot: 'Screenshot'
            },
            lighthousekeys: [ 'seo', 'best-practices', 'accessibility', 'pwa', 'performance'],
            teamsInterval: '',
            sortKey: 'lighthouse',
            disabled: false
          }
        },
        mounted: function() {
          var self = this;
          if (self.teams && self.teams !== '' && self.teams !== []) {
            self.getTeams();
            self.startTeamsPolling();
          }
          
        },
        beforeDestroy() {
          var self = this;
          clearInterval(self.teamsInterval);
        },
        methods: {
          parseObj: function(obj){
            if (!obj) return ''
            return obj
          },
          parseArr: function(arr){
            if (!arr) return []
            return arr;
          },
          startTeamsPolling() {
            var self = this;
            self.interval = setInterval(function(){
              self.getTeams();
            }, 30000);
          },
          getTeam() {
            var self = this;
            if (self.team && self.team !== '') {
              axios.get(`/api/teams/${self.team._id}`)
              .then((res) => {
                self.team = res.data;
              })
            }
          },
          getTeams() {
            var self = this;
            axios.get('/api/teams')
            .then((res) => {
              self.teams = res.data;
              self.sortBy(self.sortKey, !self.ascending);
              var svgg = document.getElementById('graph');
              if (svgg) {
                return self.graph(svgg);
              }

            })
            .catch(function(err){
              console.log(err)
            })
          },
          sortBy(key, ascending) {
            var self = this;
            self.ascending = !ascending;
            self.sortKey = key;
            self.teams.sort(function(a, b){
              // a is team

              var itemA, itemB;
              switch(key) {
                case 'buildStatus':
                  itemA = self.buildStatuses.indexOf(a.buildStatus);
                  itemB = self.buildStatuses.indexOf(b.buildStatus);
                  break;
                case 'name':
                  itemA = a.name;
                  itemB = b.name;
                  break;
                case 'isOnlineHackathon':
                  itemA = a.isOnlineHackathon;
                  itemB = b.isOnlineHackathon;
                  break;
                case 'lighthouse':
                  itemA = self.lighthousekeys.map(function(k){
                    if (a.lighthouse.length === 0) return 0;
                    return a.lighthouse[a.lighthouse.length - 1][k];
                  }).reduce(function(acc, curr){
                    return acc + curr;
                  }) / 5;
                  itemB = self.lighthousekeys.map(function(k){
                    if (b.lighthouse.length === 0) return 1;
                    return b.lighthouse[b.lighthouse.length - 1][k];
                  }).reduce(function(acc, curr){
                    return acc + curr;
                  }) / 5;
                  break;
                default:
                  return 0;
              }

              switch(ascending) {
                case true:
                  if (itemA < itemB) {
                    return -1;
                  }
                  if (itemA > itemB) {
                    return 1;
                  }
                  break;
                case false:
                  if (itemA < itemB) {
                    return 1;
                  }
                  if (itemA > itemB) {
                    return -1;
                  }
                  break;
                default:
                  return 0;
              }
              return 0;
            })
          },
          createFlash(type, message) {
            var flashContainer = document.getElementById('flash-container');

            var alert = document.createElement("DIV");
            alert.classList.add('alert', 'alert-' + type);
            alert.role = 'alert';
            alert.innerHTML = message;
            flashContainer.appendChild(alert);
            return null;
          },
          handleFormSubmit(e) {
            var self = this;
            e.preventDefault();
            var axiosurl, msg;
            if (e.target.getAttribute('id') === 'create-team-form') {
              axiosurl = '/api/teams';
              msg = 'creat'
            } else {
              axiosurl = `/api/teams/${self.team._id}`
              msg = 'updat'
            }
            self.disabled = true;
            var createTeamForm = document.getElementById('create-team-form') || document.getElementById('update-team-form');
            var flashContainer = document.getElementById('flash-container');
            var actionContainer = document.getElementById('team-form-or-webhook');
            var teamName = createTeamForm.querySelector('#team-name').value;
            var teamRepo = createTeamForm.querySelector('#team-repo').value;
            var teamSite = createTeamForm.querySelector('#team-site').value;
            var teamCollaborators = createTeamForm.querySelector('#team-collab').value;
            var teamIsOnline = createTeamForm.querySelector('#isOnLine').checked;
            var team = {
              name: teamName,
              collaborators: teamCollaborators.split(',').map(function(str) { return str.trim(); }).filter(function(item, pos,self) { return self.indexOf(item) == pos; }),
              githubRepository: teamRepo,
              siteUrl: teamSite,
              isOnlineHackathon: teamIsOnline
            }
            return axios.post(axiosurl, team).then(function(response) {
              var status = response.status;
              if (parseInt(status, 10) === 200) {
                self.createFlash('success', 'Your team has been '+msg+'ed!<br><br>');
                if (msg === 'creat') {
                  setTimeout(function() {window.location.href = '/team';}, 1000 * 60 * 3) // three seconds
                }

              } else {
                return self.createFlash('warning', 'Something went wrong '+msg+'ing your team')
              }
            })
            .catch(function(){
              self.createFlash('warning', 'Something went wrong '+msg+'ing your team. Collaborators may not belong to more than one team.');
            })
          },
          removeTeam() {
            var self = this;
            if (self.team && self.team !== '') {
              axios.post(`/api/teams/delete/${self.team._id}`)
              .then((res) => {
                return window.location.href = '/';
              })
              .catch((err) => {
                console.log(err)
              })
            }
          },
          extract(result) {
            var e = Object.keys(result).reduce(function(k, l){
              return result[''+k+''] + result[''+l+'']
            }) 
            return (e / 5);
          },
          graph(svgg){
            var self = this;
            var dots = d3.map(self.teams, function(team) {
              //self.teams.map(function(team){
              console.log(team)
              return d3.map(team.lighthouse, function(result){
                console.log(result)
                return {
                  name: team.name,
                  date: result.date,
                  avg: self.extract(result)
                }
              }) 
            });
            
            console.log(dots)
            var w = svgg.getBoundingClientRect().width;
            var h = 200;
            // set up size
            var margin = { top: 50, right: 30, bottom: 20, left: 30 };
            var width = w - margin.left - margin.right;
            var height = h - margin.top - margin.bottom;

            var color = d3.scaleOrdinal(d3.schemeCategory10);
            var colorD = d3.map(self.teams, function(d) { return d.name });

            color.domain(colorD);
            svgg.innerHTML = ''
            var svg = d3.select(self.$el)
            .append('svg')
            .attr('width', width + margin.left + margin.right)
            .attr('height', height + margin.top + margin.bottom);
            var g = svg
            .append('g')
            .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')

            var minVal = d3.min(dots, function(c) { return c.avg; });
            var maxVal = d3.max(dots, function(c) { return c.avg; });
            var minDate = d3.min(dots, function(c) { return c.date; });
            var maxDate = d3.max(dots, function(c) { return c.date; });
            /*var xdomain = d3.extent(d3.map(self.teams,function(team){return d3.map(team.lighthouse,function(d){return d.date})}));
            var ydomain = d3.extent(d3.map(
              self.teams,function(team){
                return d3.map(team.lighthouse,function(d){
                  return d3.map(Object.keys(d).filter(function(e){
                    return ['_id','screenshot','date'].indexOf(e) === -1
                  }), function(c){return d[c]})})}));
            */
            var xdomain = self.teams.map(function(team){return team.lighthouse.map(function(d){return d.date})}).flat(2).sort();
            var ydomain = self.teams.map(function(team){
                return team.lighthouse.map(function(d){
                  return Object.keys(d).filter(function(e){
                    return ['_id','screenshot','date'].indexOf(e) === -1
                  }).map(function(c){return d[c]})})}).flat(2).sort();
            /*console.log('xdomain')
            console.log(xdomain)
            console.log('ydomain')
            console.log(ydomain)*/
            console.log(minVal, maxVal, minDate, maxDate, xdomain, ydomain)
            // xscale
            var x = d3.scaleTime().range([0, width]);
            var y = d3.scaleLinear().range([height, 0]);

            var line = d3.line()
            .x(function (d, i) {
              return x(d.date);
            })
            .y(function (d, i) {
              return y(d.value);
            });

            x.domain(
              [minDate, maxDate]
            );
            y.domain(
              ydomain
            );

            var xAxis = d3.axisBottom(x);
            
            g.append('g').attr('class', 'x axis')
            .attr('transform', 'translate(0,' + height + ')')
            .call(xAxis);
            g.append('g').attr('class', 'y axis')
            .call(d3.axisLeft(y));
            
            var valueline2 = d3.line()
              .x(function(d) { return x(d.date); })
              .y(function(d) { return y(d.avg); });
              
            self.teams.forEach(function(team){
              g.append('path')
              .data(d3.map(team.lighthouse, function(result){
                return {
                  name: team.name,
                  date: result.date,
                  avg: self.extract(result)
                }
              }))
              .attr('class', 'line')
              .attr('d', function (d, i) {
                return line(d);
              }).style('stroke', function (d, i) {
                return color(d.name);
              })
            })
            /*var measurement = 
              g.selectAll('.measurement')
              .data(self.teams)
              .enter().append('g')
              .attr('class', 'measurement');

            var path = measurement.append('path')
              .attr('class', 'line')
              .attr('d', function (d, i) {
                return line(d.lighthouse);
              }).style('stroke', function (d, i) {
                return color(d.name);
              })

            var label = measurement.append('text')
              .attr('x', width + 16 )
              .attr('y', function(d, i){
                return y(d.avg)
              })
              .attr('dy', '.35em')
              .text(function (d, i) {
                return d.name.toUpperCase();
              })
              .attr('text-anchor', 'end');

            var dot = 
            g.selectAll('.dot')
            .data(dots)
            .enter().append('svg:circle')
            .attr('class', 'dot')
            .attr('cx', function(d, i) {
              return x(d.date)
            })
            .attr('cy', function(d, i) { 
              return y(d.avg)
            })
            .attr('r', 6)
            .style('fill', color('TS'));*/
          }
        }
      })
